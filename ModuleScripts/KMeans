local module = {}

local AqwamMatrixLibrary = require(script.Parent.AqwamRobloxMatrixLibraryLinker.Value)

local defaultEpsilon = 1 * math.exp(-5)

local defaultMaxNumberOfIterations = 500

local function calculateFactorial(x)
	
	if (x > 0) then
		
		return x * calculateFactorial(x-1)
		
	else
		
		return x
		
	end
	
end

local function calculatePoisson(featureVector, meanVector, numberOfData)
	
	local negativeMeanVector = AqwamMatrixLibrary:multiply(-1, meanVector)
	
	local expNegativeMeanVector = AqwamMatrixLibrary:applyFunction(math.exp, negativeMeanVector)
	
	local factorialNumberOfData = calculateFactorial(numberOfData)
	
	local inverseFactorialNumberOfData = 1/factorialNumberOfData
	
	return AqwamMatrixLibrary:multiply(featureVector, meanVector, expNegativeMeanVector, inverseFactorialNumberOfData)
	
end

local function calculatePosteriorProbability(featureMatrix, meanMatrix, probabilities)
	
	local posteriorMatrix = AqwamMatrixLibrary:createMatrix(#meanMatrix, #meanMatrix[1], 0)
	
	local numberOfData = #featureMatrix
	
	local featureVector
	
	local meanVector
	
	local eachClass
	
	local eachClassSum
	
	local probability
	
	local poisson
	
	local eachClassDividedByEachClassSum
	
	local inverseEachClassSum
	
	for i = 1, #featureMatrix, 1 do
		
		featureVector = {featureMatrix[i]}
		
		for j = 1, #meanMatrix, 1 do
			
			meanVector = {meanMatrix[j]}
			
			probability = {probabilities[j]}
			
			poisson = calculatePoisson(featureVector, meanMatrix, numberOfData)
			
			eachClass = AqwamMatrixLibrary:multiply(poisson, probability)
			
		end
		
		eachClassSum = AqwamMatrixLibrary:sum(eachClass)
		
		inverseEachClassSum =  1/eachClassSum
		
		eachClassDividedByEachClassSum = AqwamMatrixLibrary:multiply(eachClass, inverseEachClassSum) -- Sometimes generate nan values. When added to non-nan values, the matrix will contain nan
		
		if not AqwamMatrixLibrary:areMatricesEqual(eachClassDividedByEachClassSum, eachClassDividedByEachClassSum) then continue end -- A quick fix to nan issue
		
		posteriorMatrix = AqwamMatrixLibrary:add(posteriorMatrix, eachClassDividedByEachClassSum)
		
	end
	
	return posteriorMatrix
	
end

local function calculateOptimalProbability(posteriorMatrix)
	
	local numberOfProbabilities = #posteriorMatrix
	
	local posteriorMatrixSum = AqwamMatrixLibrary:verticalSum(posteriorMatrix)
	
	local probabilitiesMatrix = {}
	
	local probability
	
	local posteriorVector
	
	for i = 1, numberOfProbabilities, 1 do
		
		posteriorVector = {posteriorMatrix[i]}
		
		probability = AqwamMatrixLibrary:divide(posteriorVector, posteriorMatrixSum)
		
		probabilitiesMatrix[i] = probability[1]
		
	end
	
	return probabilitiesMatrix
	
end

local function calculateOptimalMean(featureMatrix, posteriorMatrix)
	
	local featureVector
	
	local posteriorVector
	
	local transposedPosteriorVector
	
	local Numerator
	
	local NumeratorSum
	
	local newMeanVector
	
	local posteriorVectorSum
	
	local newMeanMatrix = {}
	
	local featureVector 

	for i = 1, #posteriorMatrix, 1 do

		posteriorVector = {posteriorMatrix[i]}
		
		Numerator = {}
		
		for j = 1, #featureMatrix, 1 do
			
			featureVector = {featureMatrix[j]}
			
			Numerator[j] = AqwamMatrixLibrary:multiply(featureVector, posteriorVector)[1] -- [1] is added so that we remove 1 dimension to merge with the Numerator
			
		end
		
		NumeratorSum = AqwamMatrixLibrary:verticalSum(Numerator)
		
		newMeanVector = AqwamMatrixLibrary:divide(NumeratorSum, posteriorVector)
		
		newMeanMatrix[i] = newMeanVector[1] -- [1] is added so that we remove 1 dimension to merge with the newMeanMatrix
 		
	end
	
	return newMeanMatrix
	
end

local function calculateIncompleteLogLikelihood(featureMatrix, meanMatrix, probabilitiesMatrix)
	
	local numberOfData = #featureMatrix
	
	local logLikesVector = {}
	
	local logLike
	
	local likelihood
	
	local likelihoodVector = {}
	
	local likelihoodVectorSum
	
	local featureVector
	
	local meanVector
	
	local probability
	
	local poisson
	
	local incomplete
	
	local probabilityTransposed
	
	for i = 1, #featureMatrix, 1 do
		
		featureVector = {featureMatrix[i]}
		
		for j = 1, #meanMatrix, 1 do
			
			probability = {probabilitiesMatrix[j]}
			
			meanVector = {meanMatrix[j]}
			
			poisson = calculatePoisson(featureVector, meanVector, numberOfData)
			
			probabilityTransposed = AqwamMatrixLibrary:transpose(probability)
			
			likelihood = AqwamMatrixLibrary:dotProduct(poisson, probabilityTransposed)
			
			table.insert(likelihoodVector, {likelihood})
			
		end
		
		logLike = AqwamMatrixLibrary:applyFunction(math.log10, likelihoodVector)
			
		table.insert(logLikesVector, logLike[1])
		
	end
	
	incomplete = AqwamMatrixLibrary:sum(logLikesVector)
	
	return incomplete
	
end


function module:train(featureMatrix, numberOfClusters, maxNumberOfIterations, epsilon, suppressOutput)
	
	local incompletes = {}
	
	local cost = math.huge
	
	epsilon = epsilon or (defaultEpsilon * #featureMatrix)
	
	maxNumberOfIterations = maxNumberOfIterations or defaultMaxNumberOfIterations
	
	local posteriorMatrix
	
	local probabilitiesMatrix = AqwamMatrixLibrary:createRandomNormalMatrix(numberOfClusters, #featureMatrix[1])
	
	local meanMatrix = AqwamMatrixLibrary:createRandomNormalMatrix(numberOfClusters, #featureMatrix[1])
	
	local incompleteLogLikelihood
	
	local current
	
	local previous
	
	local numberOfIterations = 0
	
	repeat
		
		numberOfIterations += 1
		
		posteriorMatrix = calculatePosteriorProbability(featureMatrix, meanMatrix, probabilitiesMatrix)
		
		probabilitiesMatrix = calculateOptimalProbability(posteriorMatrix)
		
		meanMatrix = calculateOptimalMean(featureMatrix, posteriorMatrix)
		
		incompleteLogLikelihood = calculateIncompleteLogLikelihood(featureMatrix, meanMatrix, probabilitiesMatrix)
		
		table.insert(incompletes, incompleteLogLikelihood)
		
		if (#incompletes > 1) then
			
			current = incompletes[#incompletes]
			
			previous = incompletes[#incompletes - 1]
			
			cost = current - previous
			
		end
		
		if (not suppressOutput) then print("Iteration: " .. numberOfIterations .. "\t\tCost: " .. cost) end
		
	until (numberOfIterations == maxNumberOfIterations) or (cost <= epsilon)
	
	return meanMatrix, probabilitiesMatrix
	
end

function module:predict(featureVector, meanMatrix, probabilitiesMatrix)
	
	local selectedCluster
	
	local probability
	
	local highestProbability = -math.huge
	
	local probabilityVector
	
	local posteriorMatrix = calculatePosteriorProbability(featureVector, meanMatrix, probabilitiesMatrix)
	
	local posteriorMatrixSum = AqwamMatrixLibrary:horizontalSum(posteriorMatrix)
	
	for cluster = 1, #posteriorMatrix, 1 do
		
		probability = posteriorMatrixSum[cluster][1]
		
		if (probability > highestProbability) then
			
			selectedCluster = cluster
			
			probabilityVector = {posteriorMatrix[cluster][1]}
			
			highestProbability = probability
			
		end
		 
	end
	
	return selectedCluster, probabilityVector
	
end

return module
